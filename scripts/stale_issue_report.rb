#!/usr/bin/ruby

BEGIN {
    require 'logger'
    require 'octokit'
    require 'colorize'
    require 'json'

    puts "Initializing Anafora pull request reports..."
    t = Time.new

    # Set org name.
    $ORG = "stolostron"
    $BACKLOG = "backlog"

    # Set squad label.
    $SQUAD_LABEL = ENV['SQUAD_LABEL']

    # User GitHub token.
    $GITHUB_TOKEN = ENV["GITHUB_TOKEN"]
    $GITHUB_URL = "https://github.com"

    $ANAFORA_URL = "#{$GITHUB_URL}/#{$ORG}/anafora"

    # Slack token and webhook url.
    $SLACK_BOT_TOKEN = ENV["SLACK_BOT_TOKEN"]
    $SLACK_CHANNEL_ID = ENV["SLACK_CHANNEL_ID"]
    $SLACK_WEBHOOK_URL = ENV["SLACK_WEBHOOK_URL"]

    # Local report directory.
    $REPORT_DIR = "report/#{t.strftime("%m-%d-%y")}"
    $REPORT_FILE = "#{$REPORT_DIR}/stale-issue-report-#{t.strftime("%s")}"

    unless Dir.exist?($REPORT_DIR)
        puts "#{$REPORT_DIR} does not exist. Creating report directory."
        Dir.mkdir($REPORT_DIR)
    else
        puts "#{$REPORT_DIR} already exists. Skipping creating new report directory."
    end

    $logger = Logger.new File.new("#{$REPORT_FILE}.log", "w+")

    # Check to see if the GITHUB_TOKEN and SLACK_WEBHOOK_URL exist and are configured correctly.
    unless ($GITHUB_TOKEN && $SLACK_WEBHOOK_URL)
        err = "GITHUB_TOKEN and SLACK_WEBHOOK_URL are required to be configured. Please ensure that the GITHUB_TOKEN and SLACK_WEBHOOK_URL are configured correctly."
        $logger.error err
        abort err
    else
        $logger.info "Detected GITHUB_TOKEN and SLACK_WEBHOOK_URL."
    end

    client = Octokit::Client.new(:access_token => $GITHUB_TOKEN)
    $total_stale_count = 0
}

END { 
    message = "Total number of stale issues received for `#{$SQUAD_LABEL}`: #{$total_stale_count}"
    $logger.info message
    puts "\n#{$message}"

    send_report_to_slack(webhook: $SLACK_WEBHOOK_URL, body: File.read("#{$REPORT_FILE}.txt"))
}

def send_report_to_slack (**args)
    if $total_stale_count >= 10
        status = 'alert'
    elsif $total_stale_count > 5
        status = 'warning'
    else
        status = 'good'
    end

    payload = {
        :attachments => [
            { 
                "color" => status == 'alert' ? 'danger' : status,
                "text" => args[:body],
                "title" => "View Stale Issue Report in Github -> Anafora",
                "title_link" => $ANAFORA_URL
            }
        ],
        :text => ":announcement: Hello team! Here is your weekly `GitHub Stale Issue Report`!\n\n" \
            ":#{status}:There are `#{$total_stale_count}` stale issues opened and assigned to the squad label: `#{$SQUAD_LABEL}`! Please remember to review or close any inactive issues.\n\n"
    }.to_json

    # Post the report to the configured slack channel.
    res = `curl -s -X POST --data-urlencode 'payload=#{payload}' #{args[:webhook]}`
    err = "Failed to post the report to the slack channel."
    
    unless res == "ok"
        $logger.error err
        abort err
    end

    # Get the timestamp of the message that was posted.
    res = `curl -s -H "Authorization: Bearer #{$SLACK_BOT_TOKEN}" -d "channel=#{$SLACK_CHANNEL_ID}" -d "limit=1" https://slack.com/api/conversations.history`
    data = JSON.parse(res, object_class: OpenStruct)
    ts = data.messages[0].ts

    unless !ts.nil?
        err = "Failed to message that was posted timestamp within the slack channel."
        $logger.error err
    else
        # Optional: Add thread reaction to the message that we posted.
        res = `curl -s -H "Authorization: Bearer #{$SLACK_BOT_TOKEN}" -d "channel=#{$SLACK_CHANNEL_ID}" -d "timestamp=#{ts}" -d "name=usethreads" https://slack.com/api/reactions.add`
    end

    $logger.close()

    # Create a thread and add the log file that was captured during the runtime.
    resp = `curl -H 'Authorization: Bearer #{$SLACK_BOT_TOKEN}' -F 'file=@#{$REPORT_FILE}.log' -F 'initial_comment=Log data generated by the report' -F 'filetype=text' -F 'channels=#{$SLACK_CHANNEL_ID}' -F 'thread_ts=#{ts}' https://slack.com/api/files.upload`
end

# Open the text file that will be sent to the slack webhook.
f = File.open("#{$REPORT_FILE}.txt", "w+")

r = client.list_issues("#{$ORG}/#{$BACKLOG}", :per_page => 100, :labels => "#{$SQUAD_LABEL},stale", :direction => "desc")
$total_stale_count = r.count

if r.count == 0
    message = "There are currently no stale issues within the `#{$ORG}/#{$BACKLOG}` repository that have been assigned to `#{$SQUAD_LABEL}`"
    $logger.info message
    f.puts message
else
    message = "Received the following stale issues from the `#{$ORG}/#{$BACKLOG}` repository for `#{$SQUAD_LABEL}`:"
    f.puts message
    r.each do |issue|
        message = "Received issue: #{issue.number} #{issue.title}"
        $logger.info message
        
        message = "\tâ€¢ <#{issue.html_url}|#{issue.number}> #{issue.title}"
        f.puts message
        puts message
    end
end

f.close()
